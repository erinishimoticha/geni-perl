.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "WWW::Geni 3pm"
.TH WWW::Geni 3pm "2011-04-21" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
WWW::Geni \- Perl extension for Geni.com
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use WWW::Geni;
\&
\&        my $geni = new WWW::Geni($username, $password, collaborators => 1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Use this module to manipulate Geni profiles and examine profile conflicts.
This module contains four classes:  WWW::Geni, WWW::Geni::List, WWW::Geni::Profile, and
WWW::Geni::Conflict.
.SH "METHODS"
.IX Header "METHODS"
.SS "WWW::Geni"
.IX Subsection "WWW::Geni"
\fIWWW::Geni\->new($username, \f(CI$password\fI)\fR
.IX Subsection "WWW::Geni->new($username, $password)"
.PP
Returns a WWW::Geni object or 0 if login credentials were not supplied or login
fails. Optional argument \*(L"collaborators\*(R" specifies whether to retrieve
collaborator conflicts or only your own.
.PP
\fI\f(CI$geni\fI\->\fIuser()\fI\fR
.IX Subsection "$geni->user()"
.PP
Get username the script is currently logged in as.
.PP
\fI\f(CI$geni\fI\->\fItree_conflicts()\fI\fR
.IX Subsection "$geni->tree_conflicts()"
.PP
Returns a WWW::Geni::List of WWW::Geni::Conflict objects.  Access by using
\&\f(CW$list\fR\->\fIhas_next()\fR and \f(CW$list\fR\->\fInext()\fR.
.PP
.Vb 4
\&        my $list = $geni\->tree_conflicts();
\&        while(my $conflict = $list\->next()){
\&                # do something
\&        }
.Ve
.SS "WWW::Geni::Conflict"
.IX Subsection "WWW::Geni::Conflict"
This object should only be created internally by this module. It is used to group profiles that may be duplicates of each other and document the relationships between those profiles.
.PP
\fI\f(CI$conflict\fI\->\fIprofile()\fI\fR
.IX Subsection "$conflict->profile()"
.PP
Returns a WWW::Geni::Profile object describing the focal profile of this conflict.
.PP
\fI\f(CI$conflict\fI\->\fImanagers()\fI\fR
.IX Subsection "$conflict->managers()"
.PP
\&\s-1TODO:\s0 Make sure this is accurate
.PP
Returns a WWW::Geni::List of WWW::Geni::Profile objects describing the managers involved in this conflict.
.PP
\fI\f(CI$conflict\fI\->\fItype()\fI\fR
.IX Subsection "$conflict->type()"
.PP
Returns the type of conflict in the form \*(L"parent\*(R" or \*(L"partner\*(R".
.PP
\fI\f(CI$conflict\fI\->\fIactor()\fI\fR
.IX Subsection "$conflict->actor()"
.PP
Returns a WWW::Geni::Profile describing the last Geni user who acted upon this conflict.
.PP
\fI\f(CI$conflict\fI\->\fIfetch_list()\fI\fR
.IX Subsection "$conflict->fetch_list()"
.PP
Returns a WWW::Geni::List of WWW::Geni::Profile objects describing, respectively, the spouses, parents, children, and siblings of the conflict's focal profile.
.SS "WWW::Geni::Profile"
.IX Subsection "WWW::Geni::Profile"
Describes a single Geni profile.
.PP
\fI\f(CI$profile\fI\->\fIid()\fI\fR
.IX Subsection "$profile->id()"
.PP
Get the new-style \s-1ID\s0 of the profile, which is in the form \*(L"profile\-0000000000\*(R", or if it is not known, the old-style \s-1ID\s0, which is in the form \*(L"G00000000000000000\*(R".
.PP
\fI\f(CI$profile\fI\->\fIfirst_name()\fI =head3 \f(CI$profile\fI\->\fImiddle_name()\fI =head3 \f(CI$profile\fI\->\fIlast_name()\fI =head3 \f(CI$profile\fI\->\fImaiden_name()\fI =head3 \f(CI$profile\fI\->\fIdisplay_name()\fI =head3 \f(CI$profile\fI\->\fIgender()\fI =head3 \f(CI$profile\fI\->\fIbirth_date()\fI =head3 \f(CI$profile\fI\->\fIbirth_location()\fI =head3 \f(CI$profile\fI\->\fIdeath_date()\fI =head3 \f(CI$profile\fI\->\fIdeath_location()\fI =head3 \f(CI$profile\fI\->\fIlocked()\fI\fR
.IX Subsection "$profile->first_name() =head3 $profile->middle_name() =head3 $profile->last_name() =head3 $profile->maiden_name() =head3 $profile->display_name() =head3 $profile->gender() =head3 $profile->birth_date() =head3 $profile->birth_location() =head3 $profile->death_date() =head3 $profile->death_location() =head3 $profile->locked()"
.PP
Returns 1 if profile is locked, 0 if profile is not locked.
.PP
\fI\f(CI$profile\fI\->\fIbig_tree()\fI\fR
.IX Subsection "$profile->big_tree()"
.PP
Returns 1 if the profile is in the Big Tree, 0 if it is not.
.PP
\fI\f(CI$profile\fI\->\fIclaimed()\fI\fR
.IX Subsection "$profile->claimed()"
.PP
Returns 1 if the profile is claimed, i. e., a living Geni user, 0 if it is not.
.PP
\fI\f(CI$profile\fI\->\fIpublic()\fI\fR
.IX Subsection "$profile->public()"
.PP
Returns 1 if the profile is public, 0 if it is private.
.PP
\fI\f(CI$profile\fI\->\fIcreator()\fI\fR
.IX Subsection "$profile->creator()"
.PP
Returns the WWW::Geni::Profile of the profile's creator.
.PP
\fI\f(CI$profile\fI\->\fIguid()\fI\fR
.IX Subsection "$profile->guid()"
.PP
Returns the profile's old-style \s-1ID\s0 in the form \*(L"G00000000000000000\*(R" if we have it.
.PP
\fI\f(CI$profile\fI\->\fImanagers()\fI\fR
.IX Subsection "$profile->managers()"
.PP
\&\s-1TODO:\s0 Change this to a WWW::Geni::List of WWW::Geni::Profile objects.
.PP
Returns an array of profile ids representing the managers of the profile.
.SS "WWW::Geni::Family"
.IX Subsection "WWW::Geni::Family"
This class may not ever be used and may be deleted.
.SS "WWW::Geni::List"
.IX Subsection "WWW::Geni::List"
\&\s-1TODO:\s0 see if there is any need for an existing iterable type class instead of defining our own, and weigh the benefits of an additional dependency.
.PP
A class representing an iterable group of items of the same type.
.PP
\fI\f(CI$list\fI\->\fIhas_next()\fI\fR
.IX Subsection "$list->has_next()"
.PP
Return 1 if there are items left in the list, 0 if the list is empty.
.PP
\fI\f(CI$list\fI\->\fInext()\fI\fR
.IX Subsection "$list->next()"
.PP
Delete and return the next object in the list.
.PP
\fI\f(CI$list\fI\->\fIadd()\fI\fR
.IX Subsection "$list->add()"
.PP
Add an item to the end of the list.
.PP
\fI\f(CI$list\fI\->\fIcount()\fI\fR
.IX Subsection "$list->count()"
.PP
Return the number of items remaining in the list.
.SH "SEEALSO"
.IX Header "SEEALSO"
GitHub: https://github.com/erinspice/geni\-perl
.SH "AUTHOR"
.IX Header "AUTHOR"
Erin Spiceland <lt>erin@thespicelands.com<gt>
Erin is a software developer and part-time amateur genealogist, as well as
a Geni Curator.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010\-2011 by Erin Spiceland
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.1 or,
at your option, any later version of Perl 5 you may have available.
